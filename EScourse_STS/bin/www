#!/usr/bin/env node

/**
 * Module dependencies.
 */
// in the project's catalogue, don't need '.js' postfix
// default in node_modules/ and external libraries
// just means the root, string
// ./ means local module
var app = require('../app');
var debug = require('debug')('escourse-sts:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

/**
 * @param {string} process - NodeJS.Process, interface Process extends EventEmitter
 * default port: 3000
 */
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);  // express object


/**
 * Create HTTP server.
 */

/**
 * http.js, _http_server.js in node.js::core-modules
 */
var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * class Server extends events.EventEmitter
 */
server.listen(port, () => console.log("listening on port"+port.toString()));
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
